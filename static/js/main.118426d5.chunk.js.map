{"version":3,"sources":["weather/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Weather","Date","useState","setWeatherObject","isClick","setClick","isInvalid","setInvalid","useEffect","requestData","requestDailyData","defaultData","dailyData","setDailyData","weatherData","setWeatherData","query","axios","request","method","url","params","q","cnt","lat","lon","id","lang","units","mode","headers","then","response","data","catch","error","list","getCelsiusDegree","kDegree","Math","ceil","getData","date","time","moment","format","getDate","Arrow","props","className","type","char","onClick","SearchBox","placeholder","onSearch","onChange","name","Image","src","style","fontSize","main","temp","weather","map","toLocaleTimeString","replace","feels_like","speed","wind","round","visibility","humidity","Details","fontWeight","dots","slidesToShow","slidesToScroll","infinite","nextArrow","touchMove","prevArrow","item","index","dt","width","fileName","icon","max","min","App","initializeIcons","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.118426d5.chunk.js","sourcesContent":["import { Icon, Image, SearchBox, TextField } from '@fluentui/react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport Slider from \"react-slick\"\r\ninterface State {\r\n\r\n}\r\nexport const Weather = () => {\r\n\r\n    const date = new Date();\r\n    const btnClassName = \"my-1 switch-options--btn\";\r\n    const defaultWeatherObj: any = {};\r\n    const [selectedWeather, setWeatherObject] = useState(defaultWeatherObj);\r\n    const [isClick, setClick] = useState(0);\r\n    const [isInvalid, setInvalid] = useState(false);\r\n    useEffect(() => {\r\n        requestData();\r\n        requestDailyData();\r\n    }, [])\r\n    const defaultData: any = {};\r\n    const [dailyData, setDailyData] = useState(defaultData);\r\n    const [weatherData, setWeatherData] = useState(defaultData);\r\n    const requestDailyData = (query?: string) => {\r\n        let dailyDataURL = 'https://community-open-weather-map.p.rapidapi.com/forecast/daily';\r\n        axios.request({\r\n            method: 'GET',\r\n            url: dailyDataURL,\r\n            params: {\r\n                q: query ?? 'hanoi',\r\n                cnt: 16,\r\n                lat: '0',\r\n                lon: '0',\r\n                // callback: 'test',\r\n                id: '2172797',\r\n                lang: 'null',\r\n                units: '\"metric\" or \"imperial\"',\r\n                mode: 'xml, html'\r\n            },\r\n            headers: {\r\n                'x-rapidapi-key': '64c9634279msh092ca792baec574p16f3f5jsn1abe401d3871',\r\n                'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n            }\r\n        }).then(function (response) {\r\n            setDailyData(response.data);\r\n        }).catch(function (error) {\r\n            setInvalid(true);\r\n        });\r\n    }\r\n    const requestData = (query?: string) => {\r\n        let weatherURL = 'https://community-open-weather-map.p.rapidapi.com/weather';\r\n        axios.request({\r\n            method: 'GET',\r\n            url: weatherURL,\r\n            params: {\r\n                q: query ?? 'hanoi',\r\n                // cnt: 5,\r\n                lat: '0',\r\n                lon: '0',\r\n                // callback: 'test',\r\n                id: '2172797',\r\n                lang: 'null',\r\n                units: '\"metric\" or \"imperial\"',\r\n                mode: 'xml, html'\r\n            },\r\n            headers: {\r\n                'x-rapidapi-key': '64c9634279msh092ca792baec574p16f3f5jsn1abe401d3871',\r\n                'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n            }\r\n        }).then(function (response) {\r\n            setWeatherData(response.data);\r\n        }).catch(function (error) {\r\n            setInvalid(true);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (dailyData.list) {\r\n            setWeatherObject({ ...dailyData.list[0] });\r\n        }\r\n        // setData(data);\r\n    }, [dailyData])\r\n    const getCelsiusDegree = (kDegree: number) => {\r\n        return Math.ceil(kDegree - 273.15) + \"Â°\";\r\n    }\r\n    const getWindSpeed = (speed: number) => {\r\n        return Math.round(speed) + 'km/h';\r\n    }\r\n    const getVisibility = (visibility: number) => {\r\n        return (visibility / 1000) + ' km';\r\n    }\r\n\r\n    const Details = () => {\r\n        return weatherData.main && (\r\n\r\n            <div className=\"daily-item\">\r\n                <span className=\"h5 m-0\" >\r\n                    Feels Like  {getCelsiusDegree(weatherData.main.feels_like)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\" >\r\n                    Wind  {getWindSpeed(weatherData.wind.speed)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\">\r\n                    Visibility {getVisibility(weatherData.visibility)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\" >\r\n                    Humidity  {weatherData.main.humidity + '%'}\r\n                </span>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    const getData = (date: number) => {\r\n        const time = new Date(date * 1000);\r\n        return moment(time).format('ddd') + ' ' + time.getDate();\r\n    }\r\n    const getImageUrl = (fileName: string) => {\r\n        return `http://openweathermap.org/img/w/${fileName}.png`\r\n    }\r\n\r\n    const dailyList = () => {\r\n        return dailyData.list && dailyData.list.map((item: any, index: number) => {\r\n            return (\r\n                <>\r\n                    <div onClick={() => {\r\n                        setClick(index);\r\n                        setWeatherObject({ ...dailyData.list[index] })\r\n                    }} className={`daily-items  arrow-down  d-flex flex-column align-items-center ` + (isClick === index ? 'daily-items--active' : '')} >\r\n                        <span className=\"header h3\">\r\n                            {getData(item.dt)}\r\n                        </span>\r\n                        <Image style={{ width: '44px' }} src={getImageUrl(item.weather[0].icon)}></Image>\r\n                        <div className=\"d-flex \">\r\n                            <span className=\" max-celsius my-0 h1\">\r\n                                {getCelsiusDegree(item.temp.max)}\r\n                            </span>\r\n                            <span className=\"min-celsius  my-0 ml-4 h3 mt-auto\">\r\n                                {getCelsiusDegree(item.temp.min)}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center w-100\" >\r\n                            <span className=\"h4\">\r\n                                {item.weather[0].main}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-center arrow-down-container\">\r\n                        <div className=\"arrow-down\"></div>\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n    function Arrow(props: any) {\r\n        let className = props.type === \"next\" ? \"nextArrow\" : \"prevArrow\";\r\n        className += \" arrow\";\r\n        const char = props.type === \"next\" ? \">\" : \"<\";\r\n        return (\r\n            <span className={className} onClick={props.onClick} >\r\n                {char}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    return (weatherData &&\r\n        <div className=\"container\">\r\n            <SearchBox\r\n                placeholder='Type your city'\r\n                className='position-absolute searchbox-bar'\r\n                onSearch={(query) => {\r\n                    requestDailyData(query);\r\n                    requestData(query);\r\n                }}\r\n                onChange = {()=>{\r\n                    setInvalid(false);\r\n                }}\r\n\r\n            ></SearchBox>\r\n            <span className={isInvalid ? \"pl-1 text-danger errorMessage position-absolute\" : 'd-none'}>\r\n                Your city input is invalid\r\n            </span>\r\n            <div className=\"weather-container\">\r\n            </div>\r\n            <div className=\"weather-body d-flex align-items-center flex-column\">\r\n                <span className=\"h2 weather-location mt-6\">\r\n                    {weatherData.name}\r\n                </span>\r\n                <div className=\"weather-celsius d-flex align-items-center\">\r\n                    <Image src=\"https://openweathermap.org/img/w/04n.png\"></Image>\r\n                    <span className=\"ml-2\" style={{ fontSize: '44px' }}>\r\n                        {weatherData.main && getCelsiusDegree(weatherData.main.temp!)}\r\n                    </span>\r\n                </div>\r\n                {weatherData.weather && weatherData.weather.map((weather: any) => {\r\n                    return (<div className=\"weather-content h2 mt-0\">\r\n                        {weather.main}\r\n                    </div>)\r\n                })}\r\n                <div className=\"update-time h3 mt-2\">\r\n                    {\"Updated as of \" + new Date().toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, \"$1$3\")}\r\n                </div>\r\n                <div className=\"weather-bottom \">\r\n                    {Details()}\r\n                </div>\r\n                <div className=\"container\">\r\n                    <span className=\"h1 text-light flex-start  \" style={{ fontSize: '26px', fontWeight: 'normal' }}>\r\n                        Daily\r\n                </span>\r\n                    <div className=\"daily-list\">\r\n                        <Slider\r\n                            dots={false} slidesToShow={7}\r\n                            slidesToScroll={1}\r\n                            infinite={false}\r\n                            nextArrow={<Arrow type=\"next\" />}\r\n                            touchMove={false}\r\n                            prevArrow={<Arrow type=\"prev\" />}\r\n                        >\r\n                            {dailyList()}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './assets/scss/App.scss';\nimport { Weather } from './weather/Home';\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\n\nfunction App() {\n  initializeIcons();\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}